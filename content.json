{"posts":[{"title":"Wsl2安装后配置","text":"Win11安装wsl2及配置安装Wsl2启用hyper-v和wsl 打开设置-应用-可选功能-更多Windows功能 勾选 Hyper-V 适用于Linux的windows子系统 虚拟机平台 点击确定并重启 安装wsl预览版 从Github下载 WSL Pre-release msixbundle包 安装msixbundle包 1Add-AppxPackage &quot;D:\\downloads\\Microsoft.WSL_0.67.6.0_x64_ARM64.msixbundle&quot; 安装 Linux 发行版 查看可用的发行版123456789101112PS C:\\Users\\lpc10&gt; wsl --list --online以下是可安装的有效分发的列表。使用‘wsl.exe --install &lt;Distro&gt;'安装。 NAME FRIENDLY NAMEUbuntu UbuntuDebian Debian GNU/Linuxkali-linux Kali Linux RollingSLES-12 SUSE Linux Enterprise Server v12SLES-15 SUSE Linux Enterprise Server v15Ubuntu-18.04 Ubuntu 18.04 LTSUbuntu-20.04 Ubuntu 20.04 LTSOracleLinux_8_5 Oracle Linux 8.5OracleLinux_7_9 Oracle Linux 7.9 安装 Debian1wsl --install Debian 设置Wsl 为Wsl2 1wsl --set-version Debian 2 编译内核启用KVM(可选) 使用 KVM 需要内核功能支持，我们需要自行编译内核加入 KVM 支持。 升级系统，安装编译环境12sudo apt update &amp;&amp; sudo apt -y upgradesudo apt -y install build-essential libncurses-dev bison flex libssl-dev libelf-dev cpu-checker qemu-kvm libvirtd virt-manager git 获得内核源码 可以使用 Linux 官方源码，但我使用了微软专门为 WSL 2 修改后的源码。需要访问 Github 123git clone https://github.com/microsoft/WSL2-Linux-Kernel.gitcd WSL2-Linux-Kernelgit checkout linux-msft-wsl-5.15.62.1 我使用了 5.15 版本内核，可以根据自己的需要切换到其他分支使用当前系统的 config，修改后编译内核 12zcat /proc/config.gz &gt; .configmake menuconfig 在 Virtualization 中确认 Intel 支持已被选中，virtio-net 也被选中 ( 如果有 ) 按两次 ESC，再导航至 Processor type and features -&gt; Linux guest support，确定 KVM Guest support 已被选中 可以编译成模块再加载，但我选择直接编译进内核，同时可以编译 Multipath 依赖的支持，以便后续 systemd 可以少一个报错 保存并退出 编译(第一次编译要蛮久)1make -j 8 如遇到错误请安装 bc 和 dwarves 1sudo apt install bc dwarves 安装新内核 将编译好的内核拷贝到当前用户的家目录 ( Windows 这边！) 并且配置使用新内核 12cp arch/x86/boot/bzImage /mnt/c/Users/&lt;username&gt;/bzImagevim /mnt/c/Users/&lt;username&gt;/.wslconfig 不会用 vim 真的别强求，用 nano 就好了 注意将 替换成自己的用户名 将以下内容粘贴，并修改 为自己的用户名 12nestedVirtualization=truekernel=C:\\\\Users\\\\&lt;username&gt;\\\\bzImage 配置KVM 在 .wslconfig追加1kernelCommandLine=intel_iommu=on iommu=pt kvm.ignore_msrs=1 kvm-intel.nested=1 kvm-intel.ept=1 kvm-intel.emulate_invalid_guest_state=0 kvm-intel.enable_shadow_vmcs=1 kvm-intel.enable_apicv=1 启用桥接网络并配置ipv6使用Hyper-V管理器新建虚拟交换机 打开Hyper-V管理器 打开虚拟交换机管理器 选择 新建虚拟网络交换机-外部 点击 创建虚拟交换机 我的配置如下图 编辑wsl.confvim /etc/wsl.conf 加入以下内容1234567[boot]systemd=true[network]hostname = WslDebian11generateHosts = falsegenerateResolvConf = false 编辑.wslconfigvim /etc/mnt/c/Users/username/.wslconfig 加入以下内容123456[wsl2]networkingMode=bridgedvmSwitch=WSL2dhcp=falsekernelCommandLine=net.ipv6.conf.all.disable_ipv6=0 如之前配置了KVM,则.wslconfig如下12345678[wsl2]networkingMode=bridgedvmSwitch=WSL2dhcp=falsenestedVirtualization=truekernel=C:\\\\Users\\\\lpc10\\\\bzImagekernelCommandLine=intel_iommu=on iommu=pt kvm.ignore_msrs=1 kvm-intel.nested=1 kvm-intel.ept=1 kvm-intel.emulate_invalid_guest_state=0 kvm-intel.enable_shadow_vmcs=1 kvm-intel.enable_apicv=1 net.ipv6.conf.all.disable_ipv6=0 启用 systemd-networkd.service 编辑网卡配置文件 vim /etc/systemd/network/wired.network 加入如下内容123456789101112131415[Match]Name=eth0[Network]Description=Virtual switchDHCP=trueIPv6AcceptRA=trueMulticastDNS=trueLLDP=trueEmitLLDP=true[DHCP]CriticalConnection=trueRouteMetric=10UseDomains=true 启动systemd-networkd.service12sudo systemctl start systemd-networkdsudo systemctl enable systemd-networkd 配置DNSsudo vim /etc/resolv.conf12nameserver 223.6.6.6nameserver 1.12.12.12 参考 bridged-networking-under-wsl 在 WSL2 上获得近乎完整的 Linux 体验 WSL2 现已支持 Systemd","link":"/2022/09/27/Wsl2%E5%AE%89%E8%A3%85%E5%90%8E%E9%85%8D%E7%BD%AE/"}],"tags":[],"categories":[],"pages":[]}